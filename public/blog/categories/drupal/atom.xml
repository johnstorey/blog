<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: drupal | John Dreams]]></title>
  <link href="http://blog.johnstorey.org/blog/categories/drupal/atom.xml" rel="self"/>
  <link href="http://blog.johnstorey.org/"/>
  <updated>2014-09-09T19:56:40-07:00</updated>
  <id>http://blog.johnstorey.org/</id>
  <author>
    <name><![CDATA[John Storey]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Drupal Health Application Distribution]]></title>
    <link href="http://blog.johnstorey.org/blog/2014/09/09/drupal-health-application-distribution/"/>
    <updated>2014-09-09T19:01:24-07:00</updated>
    <id>http://blog.johnstorey.org/blog/2014/09/09/drupal-health-application-distribution</id>
    <content type="html"><![CDATA[<p>Announcing a pre-alpha distribution of a Drupal Distribution for building health care
related applications. After seeing multiple attempts to build Drupal solutions in the
field I did a little research, did not find anything like this, and decided to write
one on Panopoly. It&rsquo;s not necessarily far enough along that you&rsquo;d think about using
it, but I&rsquo;d love some feedback.</p>

<p>Here is an update I sent to some interested parties earlier today:</p>

<h1>GitHub Repo</h1>

<p>First, the install profile can be found at</p>

<pre><code>git clone -b 7.x-0.01-dev https://git@github.com/johnstorey/hpplat.git
</code></pre>

<p>I&rsquo;d  really love if someone could install it and give the fields on the Provider and Patient content types a sanity check. Does it look like the major fields exist?</p>

<p>The rest of this update relates to code still on my hard drive, but which should be pushed to Github this week.</p>

<h1>RESTful APIs</h1>

<p>The eternal struggle of fine and coarse grained APIs got some thinking time, along with the fact that I can&rsquo;t really predict usage patterns of clients of the platform. So here is what I ended up doing</p>

<ul>
<li> Use the Services module, mostly due to familiarity.</li>
<li> Have the basic GET, POST, UPDATE and DELETE (CRUD) endpoints.</li>
<li> Add an endpoint that allows you to pass in an API version. It returns a JSON object which lists all the current endpoints at that API version, with a description of what parameters they take (ala HATEOAS).</li>
<li> Have an endpoint &lsquo;compose&rsquo; that allows you to send a JSON object listing as many of the endpoints, with their parameters, and get back the results of calling all of them in a single HTTP request.</li>
</ul>


<p>The &lsquo;compose&rsquo; endpoint is an attempt to balance the need for a coarse grained API and the fact that I can&rsquo;t know an individual application&rsquo;s usage patterns for the APIs in advance. Any thoughts on this approach?</p>

<p>Secondly, I know I can&rsquo;t control the data structures that will need to be sent to and from the client. So each CRUD endpoint implements a hook allowing the application creator to interact with each endpoint, changing the data structure or performing some function. So now the platform can be simply customized to the application data structure on a mobile application.</p>

<h1>Tests</h1>

<p>I have barely started writing SimpleTests, and remember that I really don&rsquo;t like SimpleTest. So anyone who wants to work on that, I&rsquo;d be really grateful. If left to me there might be some PHPUnit / Behat behemoth instead &hellip;</p>

<h1>Ghost Module</h1>

<p>The current code is written as classic D7 modules, but I have recently become aware of the Ghost module that would let me write future modules in a D8 way that should make future porting much easier. Does anyone have any experience with Ghost?</p>

<h1>TrueVault</h1>

<p>More as an item of interest, I am sure you all saw the health related functionality in Apple&rsquo;s announcements, and are aware of the iOS SDK health related APIs. But did you see that TrueVault announced an iOS SDK in it&rsquo;s partner program? That may be something to keep an eye on.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Drupal 7 Put User Fields in Features]]></title>
    <link href="http://blog.johnstorey.org/blog/2014/08/18/drupal-7-put-user-fields-in-features/"/>
    <updated>2014-08-18T06:51:05-07:00</updated>
    <id>http://blog.johnstorey.org/blog/2014/08/18/drupal-7-put-user-fields-in-features</id>
    <content type="html"><![CDATA[<p>Here is a quick reminder on how to export User fields into a Feature with Drupal 7.31 and Features 2.X. I got this question this morning from another programmer, and had to experiment to be sure my process would work.</p>

<ol>
<li>Use Strongarm, and export field_bundle_settings-user-user.</li>
<li>Export the field in Field Bases.</li>
<li>Export the field in Field Instances.</li>
</ol>


<p>Normally I keep Field Base settings in their own file to facilitate re-use across content types that may be in separate Features, but that doesn&rsquo;t seem to apply to the User entity, so I put it all in one module.</p>

<p>Now if I could figure out how to field User entities separately based on user role. For the moment I am getting around that use case with careful created UIs, but that is not satisfying to me &hellip;</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Drupal 7 Services 7.x-3.7]]></title>
    <link href="http://blog.johnstorey.org/blog/2014/07/31/drupal-7-services-7-dot-x-3-dot-7/"/>
    <updated>2014-07-31T21:01:05-07:00</updated>
    <id>http://blog.johnstorey.org/blog/2014/07/31/drupal-7-services-7-dot-x-3-dot-7</id>
    <content type="html"><![CDATA[<h1>Environment.</h1>

<p>Drupal 7
Services Module 7.x-3.7</p>

<h1>Instructions for Authenticating a User.</h1>

<p>This is a reminder of the current process to log in a user and authenticate with the Drupal Services module. To be honest, when I have time to look at it, I think the RESTful module by Gizra will be a better solution for headless Drupal projects, but today Services is what I know and use.</p>

<p>This came about because I needed to jump in and make an existing NodeJS API work with Drupal on the back-end for a team member.</p>

<p>I assume that you are familiar with Drupal and Services, and want to log in using the basic authentication bundled with Services. OAuth is a different (but when needed, awesome) beast.</p>

<h2>/api/user/login.</h2>

<p>This part is simple, but the key to everything. POST to the /user/login resource on your endpoint.</p>

<ol>
<li>No Drupal specific headers.</li>
<li>The POST should work with a header of Content-Type =  application/json, but I always need to set it to application/x-www-urlencoded. I have no idea why.</li>
<li>In the requestbody set the values for username and password.</li>
<li>You will get back a login response with session_name, sessid, and token parameters.</li>
<li>In all subsequent calls set the following headers</li>
<li>  &lsquo;Cookie&rsquo; must be set to &lsquo;session_name=sessid&rsquo;. That is: set the value of Cookie to session_name and sessid, separated by an equal sign.</li>
<li>  &lsquo;Set X-CSRF-Token&rsquo; to &lsquo;token&rsquo;.</li>
</ol>


<p>You are done &mdash; Drupal now knows who your client is logged in as.</p>

<h2>/system/connect.</h2>

<p>POST to this endpoint, and if you have configured things correctly, you should get the user you logged in as back as an object. If you get the anonymous user, you&rsquo;ve done something wrong.</p>

<h2>/user/logout.</h2>

<p>To be extra sure, call /user/logout. You should get a value of TRUE back in your response body. Calling /system/connect now gives you back the anonymous user object.</p>

<h1>Summary.</h1>

<p>There are many descriptions of how to log users in and out, and the advice changes with different releases of the module. This works in the environment specified at the top of this blog post.</p>

<p>I hope this helps others out there &mdash; I&rsquo;m sure I&rsquo;ll refer to this six months from now, when I myself have forgotten the details!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Drupal Access Grants]]></title>
    <link href="http://blog.johnstorey.org/blog/2014/07/09/drupal-access-grants/"/>
    <updated>2014-07-09T15:25:19-07:00</updated>
    <id>http://blog.johnstorey.org/blog/2014/07/09/drupal-access-grants</id>
    <content type="html"><![CDATA[<p>It&rsquo;s been quite a while since this blog has been posted too &mdash; or existed! Apparently the VPS hosting it was killed in a cleanup at some point in the past. I&rsquo;ve lost some posts. Oops!</p>

<p>But we are back, and today is a topic on one of my favorite topics &mdash; coding Drupal. In this case, Drupal 7.</p>

<h1>Access and Access Grants</h1>

<p>The last time I tried to customize the permission rules in Drupal was in Drupal 6, and grants were not an option. Instead there was the node access system, and various modules you could use to customize them. IIRC, I ended up using taxonomy access lite, which allowed me to customize access based on the tag on the content type. If any code denied access to a piece of content, even if 10 other modules said &lsquo;allow&rsquo;, the access was not granted. On top of that, the node access system seemed fairly fragile.</p>

<p>The experience sucked.</p>

<p>As part of a Drupal application in the health care industry I had to put some interesting rules around CRUD access to a content type, Prescription. Specifically the interesting requirements were</p>

<blockquote><p>Create a content type &lsquo;Prescription&rsquo;.
Give it a reference to an associated Nurse writing the Prescription.
Give it a reference to an associated Doctor, who can alter and approve the prescription.
Make the Prescription private to the client organization on the web application.
Within that organization, only let the Doctor and Nurse referenced by a Prescription view it.</p></blockquote>

<p>It was the last one that got me thinking. I started research, and found that Drupal 7 has hook_node_access_records() and hook_node_grants(). A little time with a debugger and watching changes to the node_access table opened up a clean, simple implementation of the requirements.</p>

<h1>How Access Grants Work</h1>

<p>Here is how things work. All access to a node in Drupal must pass permission checks according to the settings in the node_access table. So while you are developing, keeping an eye on this table is a wise idea.</p>

<p>When you do nothing, a row is created in that table that allows anyone to view that content type. But we aren&rsquo;t going to &ldquo;do nothing&rdquo; &mdash; we are going to make our own rules.</p>

<p>When you implement hook_node_access_records(), it will be called every time a node is saved. You have the opportunity to change what is going into the node_access table at this point. While you can read the details at <a href="https://api.drupal.org/api/drupal/modules%21node%21node.api.php/function/hook_node_access_records/7">hook_node_access_records</a>, here is a simple one that modifies the access grant for a Prescription content type.</p>

<pre><code>function mymodule_node_access_records($node) {
  $grants = array() ;

  if ($node-&gt;type == 'prescription') {
    $grants[] = array(
      'realm' = 'all',
      'gid' =&gt; 0,
      'grant_view' =&gt; 0,
      'grant_update' =&gt; 1,
      'grant_delete' =&gt; 0,
      'priority' =&gt; 1,
    );
   }
 return $grants;
}
</code></pre>

<p>The interesting points here are the &lsquo;realm&rsquo; and &lsquo;gid&rsquo; parameters. Together, with the $node->id field, comprise the key of the node access table. Combined, the realm and gid are a unique grant for the node. There values are abritrary, but the gid must be an integer.</p>

<p>So the above says if someone has the realm &lsquo;all&rsquo; and gid &lsquo;0&rsquo;, don&rsquo;t let them see the node in question, let them update it, and don&rsquo;t let them delete it.</p>

<p>Once grants are checked, if they pass, then the base node access system &mdash; the one you usually modify on the permissions tab &mdash; are checked. If <em>both</em> pass then the node is presented to the user.</p>

<p>Now you get pretty flexible here. In my situation I made some custom permissions, named the realms after them, and made two entries in the $grants array. In them I used, in turn, the user id of the Doctor and Nurse referenced by the Prescription. Now I had two rows in the node access table for the Prescription. One for the Doctor and one for the Nurse.</p>

<p>But how about the check when viewing the node?</p>

<h2>hook_node_grants</h2>

<p>This is the other side of the equation. When the user attempts to access the node for any CRUD operation, hook_node_grants is called in your module. Read the documentation here: <a href="://api.drupal.org/api/drupal/modules%21node%21node.api.php/function/hook_node_grants/7">hook_node_grants</a>.</p>

<p>Basically you are returning an array whose key is the realm from hook_node_access_records, and whose value is the gid. If a record in the node_access table matches the node id, the realm, and the gid, the access permissions for the operation in that row are used.</p>

<p>Let&rsquo;s say a user has the &lsquo;custom view prescription&rsquo; permission. You might write the hook like this</p>

<pre><code>function mymodule_node_grants($account, $op) {
  $grants = array();

  if (user_acces('custom view prescription', $account)) {
    $grants['custom view prescription'] = array($account-&gt;uid);
  }

  return $grants;
}
</code></pre>

<p>This code specifies to Drupal that, subject to the current permissions settings, the current user has the grant &lsquo;custom view prescription&rsquo;-uid. What that means was defined by a call to hook_node_access_records when the node was created.</p>

<h1>So What?</h1>

<p>When you take the time to think about it, I just very simply outlined a very small amount of code that implements a highly customized permissions system that, out of the box, Drupal does not support. Once I understood the interplay of the systems, this took about 2 hours to write and to write tests.</p>

<p>Grants, unlike custom access modules, even works with Views. This is a very flexible system that puts the ability to create all sorts of custom access patterns for your Drupal applications, meaning the complexity of the solutions you are able to provide just greatly increased.</p>

<p>Oh, and what about the standard access patterns? Well, after checking grants, Drupal still checks the regular access patterns. So if by some horrible mistake a doctor in one hospital is somehow associated with the prescription of another hospital, a smple separation of content into private organic groups denies the inappropriate access.</p>

<p>This was the result of a delightful Saturday afternoon with the Drupal documentation, a book on Safari Books Online, and a debugger. Some days just go nice.</p>

<p>Now back to running the engineering department. Annual reviews are due in a week &hellip;</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Drupalizing a Web Project]]></title>
    <link href="http://blog.johnstorey.org/blog/2012/04/11/drupalizing-a-web-project/"/>
    <updated>2012-04-11T08:45:00-07:00</updated>
    <id>http://blog.johnstorey.org/blog/2012/04/11/drupalizing-a-web-project</id>
    <content type="html"><![CDATA[<p>These are notes from <a href="http://dev.nodeone.se/en/drupalizing-a-web-project">http://dev.nodeone.se/en/drupalizing-a-web-project</a> for myself. Yes, a blog post summarizing a blog post. Just think of this as a page in my notebook. Without the dead trees.</p>

<ol>
<li>Understand the problem domain, likely issues, and needed functionality.</li>
<li>Map out content types and entities.</li>
<li> Access control.</li>
<li> Reuse across site?</li>
<li> Inter-relationships?</li>
<li>User groups and their properties.</li>
<li> Roles.</li>
<li> Profiles.</li>
<li> Etc.</li>
<li>Consider views into the data.</li>
<li>Consider business rules that can be put in Rules module.</li>
<li>Look at what this process might have missed.</li>
<li>Non-IA</li>
<li> Performance and scalability.</li>
<li> Localization and internationalization.</li>
<li> Data migration.</li>
<li> Integration</li>
<li> Etc.</li>
</ol>

]]></content>
  </entry>
  
</feed>
